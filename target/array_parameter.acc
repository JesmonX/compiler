fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @print_array(%a.addr: i32*, %len: i32 ) -> () {
%entry:
  let %0 = alloca (), 0
  let %len.addr = alloca i32, 1
  let %1 = store %len, %len.addr
  let %i.addr = alloca i32, 1
  let %2 = store 0, %i.addr
  jmp label %4
%4:
  let %5 = load %i.addr
  let %6 = load %len.addr
  let %7 = lt %5, %6
  br %7, label %9, label %19
%9:
  let %10 = load %i.addr
  let %11 = offset i32, %a.addr, [%10 < none]
  let %12 = load %11
  let %13 = call @putint, %12
  let %14 = call @putch, 32
  let %15 = load %i.addr
  let %16 = add %15, 1
  let %17 = store %16, %i.addr
  jmp label %4
%19:
  jmp label %21
%21:
  ret ()
}
fn @main( ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %a.addr = alloca i32, 8
  let %1 = offset i32, %a.addr, [0 < 4], [0 < 2]
  let %2 = store 1, %1
  let %3 = offset i32, %a.addr, [0 < 4], [1 < 2]
  let %4 = store 2, %3
  let %5 = offset i32, %a.addr, [1 < 4], [0 < 2]
  let %6 = store 3, %5
  let %7 = offset i32, %a.addr, [1 < 4], [1 < 2]
  let %8 = store 4, %7
  let %9 = offset i32, %a.addr, [2 < 4], [0 < 2]
  let %10 = store 5, %9
  let %11 = offset i32, %a.addr, [2 < 4], [1 < 2]
  let %12 = store 6, %11
  let %13 = offset i32, %a.addr, [3 < 4], [0 < 2]
  let %14 = store 7, %13
  let %15 = offset i32, %a.addr, [3 < 4], [1 < 2]
  let %16 = store 8, %15
  let %17 = offset i32, %a.addr, [2 < 4], [0 < 2]
  let %18 = call @print_array, %17, 2
  let %19 = offset i32, %a.addr, [1 < 4], [0 < 2]
  let %20 = call @print_array, %19, 2
  let %21 = offset i32, %a.addr, [0 < 4], [0 < 2]
  let %22 = call @print_array, %21, 2
  let %23 = offset i32, %a.addr, [3 < 4], [0 < 2]
  let %24 = call @print_array, %23, 2
  let %25 = store 0, %0
  jmp label %27
%27:
  let %28 = load %0
  ret %28
}
