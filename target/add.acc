fn @getint( ) -> i32;
fn @getch( ) -> i32;
fn @getarray(#0: i32* ) -> i32;
fn @putint(#0: i32 ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%entry:
  let %ret.addr = alloca i32, 1 // Users: %10: i32, %8: (), 
  let %b.addr = alloca i32, 1 // Users: %5: i32, %3: (), 
  let %a.addr = alloca i32, 1 // Users: %4: i32, %1: (), 
  let %0: i32 = call @getint // Users: %1: (), 
  let %1: () = store %0: i32, %a.addr // Users: 
  let %2: i32 = call @getint // Users: %3: (), 
  let %3: () = store %2: i32, %b.addr // Users: 
  let %4: i32 = load %a.addr // Users: %6: i32, 
  let %5: i32 = load %b.addr // Users: %6: i32, 
  let %6: i32 = add %4: i32, %5: i32 // Users: %7: (), 
  let %7: () = call @putint, %6: i32 // Users: 
  let %8: () = store 0, %ret.addr // Users: 
  jmp label %return // Users: 
%return:
  let %10: i32 = load %ret.addr // Users: %11: (), 
  ret %10: i32 // Users: 
}
